{"version":3,"file":"static/js/702.f9f5b2a4.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Navbar/Profile/MyPosts/MyPosts.module.css?5179","webpack://samurai-way/./src/components/Navbar/Profile/MyPosts/Post/Post.module.css?9408","components/Navbar/Profile/MyPosts/Post/Post.tsx","components/Navbar/Profile/MyPosts/MyPosts.tsx","components/Navbar/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Navbar/Profile/ProfileInfo/ProfileInfo.module.css?4b83","components/Navbar/Profile/ProfileInfo/ProfileStatus.tsx","components/Navbar/Profile/ProfileInfo/ProfileInfo.tsx","components/Navbar/Profile/Profile.tsx","components/Navbar/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__23e4I\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__wn7m5\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PostType = {\r\n    message: string,\r\n    count: number\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://uprostim.com/wp-content/uploads/2021/02/image100-30.jpg\"/>\r\n            <div>{props.message}</div>\r\n            <span>likes: </span>\r\n            {props.count}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {ProfilePageType} from '../../../redux/store';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLength, required} from '../../../../utilits/validators';\r\nimport {TextArea} from '../../../common/FormsControls/FormsControls';\r\n\r\ntype FormValueType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    onAddPost: (newPostText: string) => void\r\n    profilePage: ProfilePageType\r\n}\r\n\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    const postElements = props.profilePage.postsArr.map(item => <Post key={item.id} message={item.message}\r\n                                                                      count={item.count}/>)\r\n\r\n    const handleAddPost = (value: FormValueType) => {\r\n        // alert(value.newPost)\r\n        props.onAddPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Post</h3>\r\n            <div>\r\n                <ReduxMyPostForm onSubmit={handleAddPost}/>\r\n            </div>\r\n            <div>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst MyPostForm = (props: InjectedFormProps<FormValueType>) => {\r\n// let maxLength15 =maxLength(15)\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea}\r\n                   name=\"newPostText\"\r\n                   validate={[required]}\r\n            />\r\n            <div>\r\n                <button type=\"submit\">Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxMyPostForm = reduxForm<FormValueType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(MyPostForm)","import React from 'react';\r\nimport {AddPostAC, ProfilePageType} from '../../../redux/profile-reducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    onAddPost: (newPostText: string) => void\r\n}\r\nconst mapStateToProps = (state: mapStateToPropsType) => {\r\n    return ({\r\n        profilePage: state.profilePage\r\n    })\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onAddPost: (newPostText: string) => {\r\n            dispatch(AddPostAC(newPostText));\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","// extracted by mini-css-extract-plugin\nexport default {\"profileAvatar\":\"ProfileInfo_profileAvatar__touvu\"};","import React from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    value: string\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    editMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status)\r\n    }\r\n    onStatusChanged = (e: any) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps: any, prevState: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode ?\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={this.editMode}>{!this.props.status ? 'No status' : this.props.status}</span>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <input autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status}\r\n                               onChange={this.onStatusChanged}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {ContactType, ProfileType} from '../../../redux/profile-reducer';\r\nimport defaultPhoto from './../../../../assets/img/default avatar.png'\r\nimport {ProfileStatus} from './ProfileStatus';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (userId: string)=> void\r\n}\r\nexport const ProfileInfo = (props: PropsType) => {\r\n\r\n    const photo = props.profile.photos.large\r\n    const fullName = props.profile.fullName\r\n    const aboutMe = props.profile.aboutMe\r\n    const contacts: ContactType = props.profile.contacts\r\n    const contactsArray = contacts ? Object.entries(contacts) : [];\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                {\r\n                    photo ? <img className={s.profileAvatar} src={photo} alt=\"profile\"/> :\r\n                        <img className={s.profileAvatar} src={defaultPhoto} alt=\"profile\"/>\r\n                }\r\n                {fullName &&\r\n                    <div>{fullName}</div>}\r\n                {aboutMe && <div>about me: {aboutMe}</div>}\r\n                {contacts &&\r\n                    <div> My Contacts:\r\n                        {contactsArray.map((i, id) => {\r\n                            return <div key={id}>{`${i[0]}: ${i[0]}`}</div>\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n            <ProfileStatus value={'ok'} status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profile-reducer';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (userId: string) => void\r\n}\r\nexport const Profile = (props: PropsType) => {\r\n    const {profile, status, updateStatus} = props\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    ProfileType,\r\n    setProfileThunkCreator,\r\n    getStatusThunkCreator,\r\n    updateStatusThunkCreator\r\n} from '../../redux/profile-reducer';\r\nimport {AppReduxStateType} from '../../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {Profile} from './Profile';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../../hoc/WithAuthRedirect';\r\n\r\ninterface MatchParams {\r\n    userId: string;\r\n}\r\n\r\nexport type MapStateType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    userId:string |null\r\n}\r\nexport type MapDispatchType = {\r\n    setProfileThunk: (userId: string | null) => void\r\n    getStatusThunk: (userId: string | null) => void\r\n    updateStatusThunk: (status: string) => void\r\n\r\n}\r\n\r\nexport type ProfilesContainerPropsType = MapStateType & MapDispatchType & RouteComponentProps<MatchParams>;\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfilesContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId:string | null = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n        }\r\n        this.props.setProfileThunk(userId)\r\n        this.props.getStatusThunk(userId)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.profile && <Profile profile={this.props.profile}\r\n                                                status={this.props.status}\r\n                                                updateStatus={this.props.updateStatusThunk}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppReduxStateType): MapStateType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    userId: state.auth.id\r\n\r\n})\r\n\r\nconst mapDispatchToProps: MapDispatchType = {\r\n    setProfileThunk: setProfileThunkCreator,\r\n    getStatusThunk: getStatusThunkCreator,\r\n    updateStatusThunk: updateStatusThunkCreator,\r\n}\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(ProfileContainer) as React.ComponentType\r\n// export default withRouter(connect(mapStateToProps, mapDispatchToProps)(ProfileContainer))\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppReduxStateType} from '../components/redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {Preloader} from '../components/common/Preloader/Preloader';\r\n\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    isLoading: boolean\r\n}\r\nconst mapStateToPropsForRedirect = (state: AppReduxStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isLoading: state.auth.isLoading\r\n})\r\n\r\nexport const withAuthRedirect = <P extends object>(Component: React.ComponentType<P>) => {\r\n    class RedirectComponent extends React.Component<P & PropsType> {\r\n\r\n        render() {\r\n            if (this.props.isLoading) {\r\n                return <Preloader/>\r\n            } else {\r\n                return (!this.props.isAuth ?\r\n                    <Redirect to={'./login'}/>\r\n                    :\r\n                    <Component {...this.props as P} />)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //@ts-ignore\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}"],"names":["Post","props","className","s","src","message","count","ReduxMyPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","validate","required","type","MyPostsContainer","connect","state","profilePage","dispatch","onAddPost","newPostText","AddPostAC","postElements","postsArr","map","item","id","value","ProfileStatus","editMode","status","setState","deActivateEditMode","updateStatus","onStatusChanged","e","currentTarget","prevProps","prevState","this","autoFocus","onBlur","onChange","onDoubleClick","React","ProfileInfo","photo","profile","photos","large","fullName","aboutMe","contacts","contactsArray","Object","entries","alt","defaultPhoto","i","Profile","ProfileContainer","userId","match","params","setProfileThunk","getStatusThunk","updateStatusThunk","mapDispatchToProps","setProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","compose","withRouter","withAuthRedirect","auth","mapStateToPropsForRedirect","isAuth","isLoading","Component","RedirectComponent","to"],"sourceRoot":""}